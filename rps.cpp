/****************************
    ROCK PAPER SCISSORS GAME
    
    This programs simulates the Rock/Paper/Scissors Game
    
    Tom Gallagher
    March 2019
    CSCI 113
    Programming Assignment 3
    
*****************************/

//THE GREAT IMPORT OF THE ALEXANDRIA LIBRARY
#include <iostream> //INPUT OUTPUT STREAM
#include <ctime> //TIME FOR SEEDING
#include <cstdlib> //RANDOM AND PSUEDO RANDOM
#include <iomanip> //SETWIDTH FUNCTION
using namespace std;

// Global Constants
const int ROCK=0, PAPER=1, SCISSORS=2;
const int COMPUTER=0, PLAYER=1, TIE=2;

// Function Prototypes
int playerInput();
int computerInput();
int chooseWinner(int, int);
void displayResults(int, int, int);

//FUNCTION main
int main(){
    int computer, player, winner;
    // INTRODUCTION
    cout<<"\nWelcome to the Rock, Paper, Scissors Game\n"
        <<"-----------------------------------------\n";
    player = playerInput();
    computer = computerInput();
    winner = chooseWinner(player, computer);
    displayResults(player, computer, winner);
    return 0;
}

/******************
    FUNCTION playerInput
    
    The purpose of this function is to solicit
    user input in selecting Rock, Scissors or Paper
    
    No parameters are sent to the function.
    The function returns the user's input as an integer
    in the form of one of the pre-defined constants.
        
**********************/
int playerInput(){
    // FUNCTION SPECIFICATION
    // 1. LOOP USED TO VALIDATE USER INPUT
    // 2. PLAYER INPUTS ROCK, PAPER, SCISSORS VALUE
    // 3. DISPLAY PLAYER'S CHOICE AS ROCK PAPER SCISSORS
    // 4. RETURNS INTEGER VALUE OF ROCK, PAPER, SCISSORS CHOSEN BY PLAYER
    
    
    string userInput;
    int choice = -1;
    bool invalidInput = true;
    
    
    do {
        cout<<"CHOOSE| Rock [0], Paper [1], or Scissors [2]"<<endl;
        
        // 2. PLAYER INPUTS ROCK, PAPER, SCISSORS VALUE
        getline(cin, userInput);
        userInput[0] = tolower(userInput[0]);
        
        //CHECK FOR ROCK - DISABLE FLAG
        if (userInput == "rock" || userInput == "0") {
            choice = ROCK;
            userInput = "ROCK";
            invalidInput = false;
        }
        
        //CHECK FOR PAPER - DISABLE FLAG
        else if (userInput == "paper" || userInput == "1") {
            choice = PAPER;
            userInput = "PAPER";
            invalidInput = false;
        }
        
        //CHECK FOR SCISSOR - DISABLE FLAG
        else if (userInput == "scissors" || userInput == "2") {
            choice = SCISSORS;
            userInput = "SCISSORS";
            invalidInput = false;
        }
        
        
        
    } while (invalidInput == true);
    
    
    //DEBUG
    //DISPLAY USERS CHOICE
    /*
    cout <<endl<<"-----------------------------"<< endl
         <<"PLAYER CHOICE   | " << right << setw(10) << userInput << endl;
    */
    
    return choice;// Possible Values: ROCK(0) or PAPER(1) or SCISSORS(2)
}

/******************
    FUNCTION computerInput
    
    The purpose of this function is to generate
    random input in the form of Rock, Scissors or Paper
    
    No parameters are sent to the function.
    The function returns the commputer's selection
    in the form of one of the pre-defined constants.
        
**********************/
int computerInput(){
    // CRITERIA
    // 1. COMPUTER RANDOMLY GENERATES ROCK, PAPER, SCISSORS VALUE
    // 2. DISPLAY COMPUTER'S CHOICE AS ROCK PAPER SCISSORS
    // 3. RETURNS INTEGER VALUE OF ROCK, PAPER, SCISSORS CHOSEN BY PLAYER
    
    //SET UP TIME TO RANDOMIZE THE SEED GENERATION
    unsigned seed = time(0);
    srand(seed);
    //ACQUIRE RANDOMIZED VALUE - "COMPUTER CHOICE"
    int computerInput = rand() % 3;
    string compChoice = "";
    
    
    //CHECK FOR ROCK
    if (computerInput == 0) {
        compChoice = "ROCK";
        computerInput = ROCK;
    }
        
    //CHECK FOR PAPER
    else if (computerInput == 1) {
        compChoice = "PAPER";
        computerInput = PAPER;
    }
    
    //CHECK FOR SCISSOR
    else if (computerInput == 2) {
        compChoice = "SCISSORS";
        computerInput = SCISSORS;
    }
    
    
    //DEBUG
    //DISPLAY COMPUTER CHOICE
    /*
    cout<<"COMPUTER CHOICE | " << right << setw(10) << compChoice << endl
    <<"-----------------------------"<< endl;
    */
    
    return computerInput; // Possible Values: ROCK(0) or PAPER(1) or SCISSORS(2)
}

/******************
    FUNCTION chooseWinner
    
    The purpose of this function is to compare
    the values generated by User and Computer
    and return a constant indicating winner or tie.
        
    Parameters for user selection and random computer selection
    are sent to the function.
    The function returns the winner in the form
    of one of the pre-defined constants.
        
**********************/
int chooseWinner(int playerValue, int computerValue){
    // CRITERIA
    // 1. COMPARE PLAYER AND COMPUTER SELECTIONS
    //    USING RULES FOR ROCK PAPER SCISSOR
    // 2. RETURNS Integer COMPUTER, PLAYER, OR TIE.
    
    int result = -1;
    int comparison = playerValue * 2 - computerValue;
    
    //DEBUG -- Evaluate if COMPARISON value is correct for given branch
    /*  cout << comparison << endl; */
    
    // OPTIMIZING BRANCHING OF THE
    // RESULTS OF THE CHOICES
    /***************************************************
     /////////////////////////////////////////////////////////////////////////////////////////////
     TIE:         PLAYER WINS:       COMPUTER WINS:
     ------------------------------------------------------------------
     0-0                 1-0                                  0-1
     1-1                 2-1                                  1-2
     2-2                 0-2                                  2-0
     ------------------------------------------------------------------
     /////////////////////////////////////////////////////////////////////////////////////////////
     ***************************************************/
    
    //Output is a tie of both values are equivalent
    if ( playerValue == computerValue ) {
        result = TIE; //COMPUTER=0, PLAYER=1, TIE=2;
    }
    
    
    
    //REMAINDER OF THE CHOICES
    /*******************************************************
     /////////////////////////////////////////////////////////////////////////////////////////////
     TIE:         PLAYER WINS:       COMPUTER WINS:
     ------------------------------------------------------------------
     X                    1-0                                  0-1
     X                    2-1                                  1-2
     X                    0-2                                  2-0
    ---------------------------------------------------------------------
    /////////////////////////////////////////////////////////////////////////////////////////////
        2 * (PLAYERINPUT) - COMPUTERINPUT =
     
     TIE:         PLAYER WINS:       COMPUTER WINS:
    ---------------------------------------------------------------------
     X                    2                                     -1
     X                    3                                      0
     X                   -2                                      4
    ---------------------------------------------------------------------
     /////////////////////////////////////////////////////////////////////////////////////////////
     We can calculate the remaining results into 2 branches by
     multiplying one of the inputs, and then subtracting it by the
     alternate choice.
     /////////////////////////////////////////////////////////////////////////////////////////////
     ***************************************************/
    
    
    
    
    else if (comparison == 2
            || comparison == 3
            || comparison == -2
             ) {
        result = PLAYER; //COMPUTER=0, PLAYER=1, TIE=2;
    }
    
    
    else if (comparison == -1
             || comparison == 0
             || comparison == 4
             ) {
        result = COMPUTER; //COMPUTER=0, PLAYER=1, TIE=2;
    }
    
    
    
    //THE CATCH ALL UMBRELLA
    else {
        cout << "ERROR: MISALIGNED VALUE: comparison";
        result = -1;
    }
    
    
    
    
    
    
    return result; //COMPUTER=0, PLAYER=1, TIE=2;
}


/******************
    FUNCTION displayResults
    
    The purpose of this function is to display
    the selections of the user, computer, and the winner

    Parameters for user selection, random computer selection,
    and winner are sent to the function in the form of integer
    constants. The function does not return a value.
        
**********************/
void displayResults(int playerValue, int computerValue, int consequent){
    // CRITERIA - Feel free to incorporate text-based graphics
    // 1. Display player's choice
    // 2. Display the computer's choice
    // 3. Display winner/tie
    
    
    //assign non numerical values to paramters for displaying purposes
    string playerText;
    string computerText;
    string result;
    /**************************************************************************
        PLAYER CHOICE---------------------------TEXT OUTPUT
            0                                                       ROCK
            1                                                       PAPER
            2                                                       SCISSOR
                

        COMPUTER CHOICE---------------------TEXT OUTPUT
                0                                           ROCK
                1                                           PAPER
                2                                           SCISSOR
     
     
     
        CONSEQUENT VALUE---------------------TEXT OUTPUT
                0                                           COMPUTER WINS
                1                                           PLAYER WINS
                2                                           TIE
     ****************************************************************************/
    
    
    
    
    
    
    //BLOCK FOR PLAYER TEXT
    if (playerValue == ROCK) {
        playerText = "ROCK";
    }
        
    else if (playerValue == PAPER) {
        playerText = "PAPER";
    }
        
    else if (playerValue == SCISSORS) {
        playerText = "SCISSORS";
    }
    
    
    
    //BLOCK FOR COMPUTER TEXT
    if (computerValue == ROCK) {
        computerText = "ROCK";
    }
        
    else if (computerValue == PAPER) {
        computerText = "PAPER";
    }
        
    else if (computerValue == SCISSORS) {
        computerText = "SCISSORS";
    }
    
    
    
    //Loop through options to acquire text to print the WINNER
    for (int i = 0; i < 3; i++) {
        if (consequent == PLAYER) {
            result = "PLAYER";
        }
        
        else if (consequent == COMPUTER) {
            result = "COMPUTER";
        }
        
        else if (consequent == TIE) {
            result = "TIE";
        }
    }
    
    
    
    //OUTPUT
    cout <<endl<<"-----------------------------"<< endl
         <<"PLAYER CHOICE   | "
         << right << setw(10) << playerText << endl;
    
    cout<<"COMPUTER CHOICE | "
        << right << setw(10) << computerText << endl
        <<"-----------------------------"<< endl;
    
    cout<<"-----------------------------"<< endl;
    cout<<"RESULT TYPE     | " << right << setw(10) << result << endl
        <<"-----------------------------"<< endl;
    
    
    
}







